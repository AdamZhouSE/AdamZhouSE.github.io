{"meta":{"title":"Blog of Adam Zhou","subtitle":"Art is long, but life is short.","description":"Take notes and write articles about Software Engineering","author":"ZZY","url":"https://zhouzhuyan.com","root":"/"},"pages":[{"title":"Projects","date":"2020-04-02T05:29:14.000Z","updated":"2020-04-06T07:41:29.135Z","comments":false,"path":"projects/index.html","permalink":"https://zhouzhuyan.com/projects/index.html","excerpt":"","text":""},{"title":"Category","date":"2020-04-01T14:21:43.000Z","updated":"2020-04-16T16:31:30.086Z","comments":false,"path":"categories/index.html","permalink":"https://zhouzhuyan.com/categories/index.html","excerpt":"","text":""},{"title":"Tag","date":"2020-04-01T17:35:18.000Z","updated":"2020-04-16T15:58:19.659Z","comments":false,"path":"tags/index.html","permalink":"https://zhouzhuyan.com/tags/index.html","excerpt":"","text":""},{"title":"About me","date":"2020-04-02T05:26:58.000Z","updated":"2020-04-16T16:31:19.062Z","comments":false,"path":"about/index.html","permalink":"https://zhouzhuyan.com/about/index.html","excerpt":"","text":"2020 开了博客，好好学习，多写文章，做一条有梦想的咸鱼！ 2018 南京大学软件工程本科"}],"posts":[{"title":"概率论的基本概念","slug":"概率论的基本概念","date":"2020-04-09T15:23:48.000Z","updated":"2020-04-16T15:54:43.993Z","comments":true,"path":"posts/36736857.html","link":"","permalink":"https://zhouzhuyan.com/posts/36736857.html","excerpt":"本文介绍了概率论的基本概念，包括概率的定义，概率的计算，同时还有随机测试的简单介绍。 重点 概率的定义 条件概率 乘法公式 全概率公式 贝叶斯公式","text":"本文介绍了概率论的基本概念，包括概率的定义，概率的计算，同时还有随机测试的简单介绍。 重点 概率的定义 条件概率 乘法公式 全概率公式 贝叶斯公式 一、概率的定义 当我们还不能用数学符号描述一件事情，那么说明我们还没有想清楚这件事。 所以，我们需要建立元素到数据的映射 1. 基本概念 1.1 随机实验 可以在相同的条件下重复进行 每次实验结果不止一个，并且事先明确实验的所有可能结果 进行一次实验前不能够确定那一个结果会出现 例：抛一枚硬币，观察正面H与反面T出现的情况 1.2 样本空间 随机试验EEE的所有可能结果组成的集合称为EEE的样本空间，记为Ω\\OmegaΩ 样本空间中的每个元素，即EEE的每个结果，称为样本点，记为eee 1.3 随机事件 样本空间Ω\\OmegaΩ的任意子集AAA称为随机事件 观察到样本点eee，若e∈Ae\\in Ae∈A，则称这一事件发生。 基本事件：由一个样本点组成的单点集 复合事件：由两个或两个以上样本点组成的集合 必然事件：全集Ω\\OmegaΩ 不可能事件：空集∅\\emptyset∅ 2. 事件的集合运算 包含：A⊂BA\\subset BA⊂B，事件B包含事件A，则事件A发生必然导致事件B发生 相等：A=BA=BA=B，即A⊂BA\\subset BA⊂B且B⊂AB\\subset AB⊂A 和：A⋃BA\\bigcup BA⋃B，即A和B至少有一个发生 差：A−BA-BA−B，即事件A发生且事件B不发生 积：A⋃BA\\bigcup BA⋃B，记作ABABAB，即事件A和事件B都发生 互不相容：AB=∅AB = \\emptysetAB=∅，即A和B不能同时发生 互逆：A⋃B=ΩA\\bigcup B=\\OmegaA⋃B=Ω 且AB=∅AB = \\emptysetAB=∅，A和B互逆，通常B记为A‾\\overline{A}A 2.1 复杂事件的集合运算 A发生而B和C都不发生：AB‾C‾=A−B−C=A−(B⋃C)A\\overline{B} \\overline{C}=A-B-C=A-(B\\bigcup C)ABC=A−B−C=A−(B⋃C) A与B都发生而C不发生：ABC‾=AB−C=AB−ABCAB\\overline{C}=AB-C=AB-ABCABC=AB−C=AB−ABC 三个事件都发生：ABCABCABC 三个事件恰好有一个发生：AB‾C‾+A‾BC‾+A‾B‾CA\\overline{B}\\overline{C}+\\overline{A}B\\overline{C}+\\overline{A}\\overline{B}CABC+ABC+ABC 三个事件至少发生一个：A⋃B⋃CA\\bigcup B\\bigcup CA⋃B⋃C 2.2 常用定律 交换律 结合律 分配率：A ⋃ (B⋂C)=(A⋃B)⋂(A⋃C)A\\, \\bigcup \\,(B\\bigcap C)=(A\\bigcup B)\\bigcap (A\\bigcup C)A⋃(B⋂C)=(A⋃B)⋂(A⋃C) A ⋂ (B⋃C)=(A⋂B) ⋃ (A⋂C)A\\, \\bigcap \\,(B\\bigcup C)=(A\\bigcap B)\\,\\bigcup \\,(A\\bigcap C)A⋂(B⋃C)=(A⋂B)⋃(A⋂C) 德摩根定律：A⋃B‾=A‾⋂B‾\\overline{A\\bigcup B}=\\overline{A}\\bigcap\\overline{B}A⋃B​=A⋂B A⋂B‾=A‾⋃B‾\\overline{A\\bigcap B}=\\overline{A}\\bigcup\\overline{B}A⋂B​=A⋃B 3. 频率 描述了事件发生的频繁程度 定义 重复观察n次事件A发生的次数nAn_AnA​称为A的频数 比值nAn\\frac{n_A}{n}nnA​​称为事件A发生的频率，并记为fn(A)f_n(A)fn​(A) 性质 0 ≤ fn(A) ≤ 10\\,\\leq\\, f_n(A)\\, \\leq\\, 10≤fn​(A)≤1 fn(Ω)=1f_n(\\Omega)=1fn​(Ω)=1 若A1,⋯ ,AkA_1,\\cdots,A_kA1​,⋯,Ak​两两互不相容，则 fn(A1 ⋃ ⋯⋃ Ak)=fn(A1)+⋯+fn(Ak)f_n(A_1\\,\\bigcup\\,\\cdots\\bigcup\\,A_k)=f_n(A_1)+\\cdots+f_n(A_k) fn​(A1​⋃⋯⋃Ak​)=fn​(A1​)+⋯+fn​(Ak​) 收敛性 当n足够大，fn(A)f_n(A)fn​(A)收敛于某个常数，这个常数就是概率（证明见后续） 我们应该都听说过德摩根抛硬币的故事，对一个事件进行大量的实验可以得到频率，但是我们不可能对所有事件都做类似的事情，所以就有了概率 4. 概率 表征事件发生的可能性大小 定义 Ω\\OmegaΩ为样本空间，对于每一事件A赋予一实数P(A)P(A)P(A)，若P(A)满足下列条件则被称为概率： 非负性：0≤P(A)≤10\\leq P(A)\\leq 10≤P(A)≤1 规范性：P(Ω)=1P(\\Omega)=1P(Ω)=1 可列可加性：A1,⋯ ,AnA_1,\\cdots,A_nA1​,⋯,An​互不相容，则P(A1 ⋃ ⋯⋃ Ak)=P(A1)+⋯+P(Ak)P(A_1\\,\\bigcup\\,\\cdots\\bigcup\\,A_k)=P(A_1)+\\cdots+P(A_k)P(A1​⋃⋯⋃Ak​)=P(A1​)+⋯+P(Ak​) 性质 P(∅)=0P(\\emptyset)=0P(∅)=0 P(A‾)=1−P(A)P(\\overline{A})=1-P(A)P(A)=1−P(A) 若A⊂BA\\subset BA⊂B，则有P(A)≤P(B),P(B−A)=P(B)−P(A)P(A)\\leq P(B),\\quad P(B-A)=P(B)-P(A)P(A)≤P(B),P(B−A)=P(B)−P(A) 对于任意两个事件A和B，P(A⋃B)=P(A)+P(B)−P(A+B)P(A\\bigcup B)=P(A)+P(B)-P(A+B)P(A⋃B)=P(A)+P(B)−P(A+B) 4.1 古典概型(等可能概型) 定义 若Ω\\OmegaΩ是**有限样本空间，其样本点为e1,⋯ene_1,\\cdots e_ne1​,⋯en​，在有限样本空间中引进概率。 1/n称为事件{ei}\\{e_i\\}{ei​}的概率，记为P({ei})P(\\{e_i\\})P({ei​}) P({e1})+⋯+P({en})=P(Ω)=1P(\\{e_1\\})+\\cdots +P(\\{e_n\\})=P(\\Omega)=1 P({e1​})+⋯+P({en​})=P(Ω)=1 从定义中不难发现古典概型的两个特点： 样本空间包含有限个元素 试验中每个基本事件发生的可能性相同 注：基本事件是两两不相容的 若事件A包含k个基本事件，则有 P(A)=∑i=1kP({eik})=knP(A)=\\sum_{i=1}^kP(\\{e_{i_k}\\})=\\frac{k}{n} P(A)=i=1∑k​P({eik​​})=nk​ 4.2 几何概型 数据从有限集合推广到无限集合 例：约会问题 两人约定7点到8点在某地会面，先到者等候另一人20分钟，过时就离去，试求这两人会面的概率。 解：以x,yx,yx,y分别表示两人到达的时刻，则会面的充要条件为∣x−y∣≤20|x-y|\\leq20∣x−y∣≤20，这就是一个几何概率的问题，可能的结果全体是边长60的正方形里面的点，结果为 P(A)=602−402602P(A)=\\frac{60^2-40^2}{60^2} P(A)=602602−402​ 从上面的例子不难看出，样本空间从原来的有限的个数，变成了无限的点。 如果要在半径为1的圆内随机地取一条弦，问弦长超过3\\sqrt{3}3​的概率是多少？ 3种思路有3种不同的答案 在数据映射中，我们需要遵循物理世界到数据集合的某种结构保持 二、概率的计算 1. 条件概率 事件A发生的条件下事件B发生的概率 1.1 定义 设A，B是两事件，且P(A)&gt;0P(A)&gt;0P(A)&gt;0，称 P(B∣A)=P(AB)P(A)P(B|A)=\\frac{P(AB)}{P(A)} P(B∣A)=P(A)P(AB)​ 为在事件A发生的条件下事件B发生的条件概率 条件概率符合概率定义中的3个条件 非负性 规范性 可列可加性：B1,⋯ ,BnB_1,\\cdots,B_nB1​,⋯,Bn​两两互不相容 P(⋃i=1∞Bi ∣ A)=∑i=1∞P(Bi∣A)P(\\bigcup_{i=1}^\\infty B_i\\,\\mid\\,A)=\\sum_{i=1}^\\infty P(B_i\\mid A) P(i=1⋃∞​Bi​∣A)=i=1∑∞​P(Bi​∣A) 同时也可以使用概率的性质 P(B1⋃B2)=P(B1∣A)+P(B2∣A)−P(B1B2∣A)P(B_1\\bigcup B_2)=P(B_1\\mid A)+P(B_2\\mid A)-P(B_1B_2\\mid A) P(B1​⋃B2​)=P(B1​∣A)+P(B2​∣A)−P(B1​B2​∣A) 注意这里是对任意事件B1,B2B_1,B_2B1​,B2​，两者不一定互不相容，如果互不相容，那么P(B1B2)=∅P(B_1B_2)=\\emptysetP(B1​B2​)=∅，与可列可加性不矛盾。 1.2 乘法公式 P(AB)=P(A)P(B∣A)P(AB)=P(A)P(B|A) P(AB)=P(A)P(B∣A) 推广：一般地，我们有： P(A1A2⋯An)=P(A1)P(A2∣A1)⋯P(An∣A1A2⋯An−1)P(A_1A_2\\cdots A_n)=P(A_1)P(A_2\\mid A_1)\\cdots P(A_n\\mid A_1A_2\\cdots A_{n-1}) P(A1​A2​⋯An​)=P(A1​)P(A2​∣A1​)⋯P(An​∣A1​A2​⋯An−1​) 大多数应用中，我们会直接获取条件概率，通过它进行计算 1.3 完备事件组 设B1,⋯ ,BnB_1,\\cdots,B_nB1​,⋯,Bn​是样本空间Ω\\OmegaΩ的一个事件组，若满足 Bi⋂Bj=∅B_i\\bigcap B_j=\\emptysetBi​⋂Bj​=∅ ，对于任意i≠ji\\neq ji​=j ⋃iBi=Ω\\bigcup_iB_i=\\Omega⋃i​Bi​=Ω 则B1,⋯ ,BnB_1,\\cdots,B_nB1​,⋯,Bn​称为一个完备事件组 1.4 全概率公式 设B1,⋯ ,BnB_1,\\cdots,B_nB1​,⋯,Bn​是样本空间Ω\\OmegaΩ的一个完备事件组，且P(Bi)&gt;0(i=1,2,⋯ ,n)P(B_i)&gt;0(i=1,2,\\cdots,n)P(Bi​)&gt;0(i=1,2,⋯,n)，则对于任一随机事件A，有 P(A)=∑i=1nP(Bi)P(A∣Bi)P(A)=\\sum_{i=1}^nP(B_i)P(A\\mid B_i) P(A)=i=1∑n​P(Bi​)P(A∣Bi​) 当P(A)P(A)P(A)不易求得时，利用此公式 1.5 贝叶斯公式 设实验E的样本空间为Ω\\OmegaΩ，AAA为Ω\\OmegaΩ的事件，B1,⋯ ,BnB_1,\\cdots,B_nB1​,⋯,Bn​为SSS的一个划分，且P(A)&gt;0,P(Bi)&gt;0P(A)&gt;0,P(B_i)&gt;0P(A)&gt;0,P(Bi​)&gt;0，则 P(Bi∣A)=P(A∣Bi)P(Bi)∑j=1nP(A∣Bj)P(Bj),i=1,2,⋯ ,nP(B_i\\mid A)=\\frac{P(A\\mid B_i)P(B_i)}{\\sum_{j=1}^nP(A\\mid B_j)P(B_j)},i=1,2,\\cdots,n P(Bi​∣A)=∑j=1n​P(A∣Bj​)P(Bj​)P(A∣Bi​)P(Bi​)​,i=1,2,⋯,n 如：设A,BA,BA,B为两事件，P(B)&gt;0P(B)&gt;0P(B)&gt;0，则 P(A∣B)=P(B∣A)×P(A)P(B)P(A\\mid B)=\\frac{P(B\\mid A)\\times P(A)}{P(B)} P(A∣B)=P(B)P(B∣A)×P(A)​ 贝叶斯定理往往与全概率公式同时使用。全概率公式用于”由因求果“的问题，而贝叶斯定理用于”执果寻因“问题。 常用：令n=2n=2n=2，那么全概率公式和贝叶斯公式分别为： P(A)=P(A∣B)P(B)+P(A∣B‾)P(B‾)P(A)=P(A\\mid B)P(B)+P(A\\mid \\overline{B})P(\\overline{B}) P(A)=P(A∣B)P(B)+P(A∣B)P(B) P(B∣A)=P(AB)P(A)=P(A∣B)P(B)P(A∣B)P(B)+P(A∣B‾)P(B‾)P(B\\mid A)=\\frac{P(AB)}{P(A)}=\\frac{P(A\\mid B)P(B)}{P(A\\mid B)P(B)+P(A\\mid \\overline{B})P(\\overline{B})} P(B∣A)=P(A)P(AB)​=P(A∣B)P(B)+P(A∣B)P(B)P(A∣B)P(B)​ 1.6 独立性 定义：设A,BA,BA,B是两事件，如果满足等式 P(AB)=P(A)P(B)P(AB)=P(A)P(B) P(AB)=P(A)P(B) 则称事件AAA和事件BBB相互独立 定理：设A,BA,BA,B是两事件，且P(A)&gt;0P(A)&gt;0P(A)&gt;0，若A,BA,BA,B相互独立，则P(B∣A)=P(B)P(B\\mid A)=P(B)P(B∣A)=P(B)，反之亦然 定理：若事件A,BA,BA,B相互独立，则下列各对事件也相互独立，A&amp;B‾,B&amp;A‾,A‾&amp;B‾A\\&amp;\\overline{B},B\\&amp;\\overline{A},\\overline{A}\\&amp;\\overline{B}A&amp;B,B&amp;A,A&amp;B 定义：设A,B,CA,B,CA,B,C是三个事件，如果满足等式 P(AB)=P(A)P(B),P(BC)=P(B)P(C)P(AC)=P(A)P(C)P(ABC)=P(A)P(B)P(C)P(AB)=P(A)P(B),\\\\ P(BC)=P(B)P(C)\\\\P(AC)=P(A)P(C)\\\\P(ABC)=P(A)P(B)P(C) P(AB)=P(A)P(B),P(BC)=P(B)P(C)P(AC)=P(A)P(C)P(ABC)=P(A)P(B)P(C) 则称事件A,B,CA,B,CA,B,C相互独立 三、随机测试示例 实际应用中使用概率论 1. 随机测试初步 假设有一个计算多项式乘法的程序。 程序可能采用左右两边的某一方式实现： (x+1)(x−2)(x+3)(x−4)(x+5)(x−6)=x6−7x3+25(x+1)(x-2)(x+3)(x-4)(x+5)(x-6)=x^6-7x^3+25 (x+1)(x−2)(x+3)(x−4)(x+5)(x−6)=x6−7x3+25 思考： 如何验证左右两边的多项式相等 假设有一个超大规模的多项式呢？ F(X)?≡G(x)F(X)?\\equiv G(x) F(X)?≡G(x) 1.1 规范化 两个多项式相等当且仅当他们的规范式中所有的对应系数相等， 那么把F(x)F(x)F(x)变换为规范式，有O(d2)O(d^2)O(d2)的复杂度 1.2 随机测试-初步 设F(X),G(x)F(X),G(x)F(X),G(x)的最高阶为的ddd，随机算法首先是从{1,⋯ ,100d}\\{1,\\cdots,100d\\}{1,⋯,100d}中均匀随机（等可能）地选择一个整数rrr，然后计算两个式子的值，进行判断。有O(d)O(d)O(d)的复杂度，大大提高了速度。 当然，这种算法可能会给出错误的答案。 F(x)≠G(x),F(r)=G(r)F(x)\\neq G(x), F(r)=G(r)F(x)​=G(x),F(r)=G(r)，算法检测结果错误 错误的概率是多少？可以接受吗？ 当rrr是方程F(x)−G(x)=0F(x)-G(x)=0F(x)−G(x)=0的根时，必然会出现错误结果。 F(x)−G(x)F(x)-G(x)F(x)−G(x)的次数不高于ddd，由代数的基本定理可知，F(x)−G(x)=0F(x)-G(x)=0F(x)−G(x)=0不可能多于ddd个根。 那么在{1,⋯ ,100d}\\{1,\\cdots,100d\\}{1,⋯,100d}中，给出错误答案的概率不会高于1100\\frac{1}{100}1001​ 2. 随机测试改进 如何改进算法正确率？ 很容易想到两个方向，扩大检测范围，重复多次检测 2.1 扩大范围 在更大的范围进行取值，比如在{1,⋯ ,1000d}\\{1,\\cdots,1000d\\}{1,⋯,1000d}中进行检测，那么错误答案概率不会超过11000\\frac{1}{1000}10001​ 2.2 重复检测 重复多次进行随机检测 有放回抽样 kkk次有放回抽样错误率为 P(E1 ⋂⋯⋂ Ek)=∏i=1kP(Ei)≤(1100)kP(E_1\\,\\bigcap\\cdots\\bigcap\\,E_k)=\\prod_{i=1}^kP(E_i)\\leq(\\frac{1}{100})^k P(E1​⋂⋯⋂Ek​)=i=1∏k​P(Ei​)≤(1001​)k 可以看到，错误率指数级降低 无放回抽样 总结： 无放回比有放回准确率高 有放回实现比无放回简单 当d+1d+1d+1次无放回抽样后，能够确保准确性，但是算法复杂度提升到O(d2)O(d^2)O(d2) 四、总结 1. 概率的定义 Ω\\OmegaΩ为样本空间，对于每一事件A赋予一实数P(A)P(A)P(A)，若P(A)满足下列条件则被称为概率： 非负性：0≤P(A)≤10\\leq P(A)\\leq 10≤P(A)≤1 规范性：P(Ω)=1P(\\Omega)=1P(Ω)=1 可列可加性：A1,⋯ ,AnA_1,\\cdots,A_nA1​,⋯,An​互不相容，则P(A1 ⋃ ⋯⋃ Ak)=P(A1)+⋯+P(Ak)P(A_1\\,\\bigcup\\,\\cdots\\bigcup\\,A_k)=P(A_1)+\\cdots+P(A_k)P(A1​⋃⋯⋃Ak​)=P(A1​)+⋯+P(Ak​) 2. 条件概率 P(B∣A)=P(AB)P(A)P(B|A)=\\frac{P(AB)}{P(A)} P(B∣A)=P(A)P(AB)​ 3. 乘法公式 P(A1A2⋯An)=P(A1)P(A2∣A1)⋯P(An∣A1A2⋯An−1)P(A_1A_2\\cdots A_n)=P(A_1)P(A_2\\mid A_1)\\cdots P(A_n\\mid A_1A_2\\cdots A_{n-1}) P(A1​A2​⋯An​)=P(A1​)P(A2​∣A1​)⋯P(An​∣A1​A2​⋯An−1​) 4. 全概率公式 P(A)=P(A∣B1)P(B1)+⋯+P(A∣Bn)P(Bn)P(A)=P(A\\mid B_1)P(B_1)+\\cdots+P(A\\mid B_n)P(B_n) P(A)=P(A∣B1​)P(B1​)+⋯+P(A∣Bn​)P(Bn​) 5. 贝叶斯公式 P(A∣B)=P(B∣A)P(A)P(B)P(A\\mid B)=\\frac{P(B\\mid A)P(A)}{P(B)} P(A∣B)=P(B)P(B∣A)P(A)​ 参考： 中国大学MOOC-南京大学-数据科学基础 《概率论与数理统计》浙江大学第四版","categories":[{"name":"数据科学","slug":"数据科学","permalink":"https://zhouzhuyan.com/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"}],"tags":[{"name":"概率论","slug":"概率论","permalink":"https://zhouzhuyan.com/tags/%E6%A6%82%E7%8E%87%E8%AE%BA/"}]},{"title":"Hexo个人博客绑定域名和配置SSL证书","slug":"Hexo个人博客绑定域名和配置SSL证书","date":"2020-04-09T13:29:25.000Z","updated":"2020-04-16T15:55:40.448Z","comments":true,"path":"posts/2cd2c226.html","link":"","permalink":"https://zhouzhuyan.com/posts/2cd2c226.html","excerpt":"Hexo 个人博客绑定域名和配置SSL证书 在完成个人博客的搭建以后，我们可以通过一个https://xxx.github.io形式的链接在访问我们的个人博客网站，那么如果想拥有一个个性的域名，该如何操作呢？","text":"Hexo 个人博客绑定域名和配置SSL证书 在完成个人博客的搭建以后，我们可以通过一个https://xxx.github.io形式的链接在访问我们的个人博客网站，那么如果想拥有一个个性的域名，该如何操作呢？ 一、 绑定域名 1. 购买 域名可以在阿里云或者腾讯云上购买，不同形式的有不同的价格，根据自己的情况购买即可。我在腾讯云上购买了我现在的域名zhouzhuyan.com 注意：如果不使用国内的服务器的话不用备案，只要完成实名认证就可以了。 现在实名认证，审核都很快，虽然说一个工作日审批，但是我的话几分钟成功了。在域名的状态显示正常以后，就可以使用了。 2. 域名解析 这个时候，网站时访问不了的，因为还需要去解析你的域名，将你的域名指向你的个人网站。 到腾讯云控制台的域名管理界面，找到你的域名，点击解析，选择添加记录 主机记录 记录类型 线路类型 记录值 www CNAME 默认 你的Github项目仓库名 @ CNAME 默认 你的Github项目仓库名 两个主机记录是为了让你的网站在有www和没有的情况下都可以访问，仓库名可以在Github仓库的Settings里面找到。解析需要10分钟，耐心等待。 3. 在项目中更换 到Github中找到自己的网站所在的仓库，进入Settings界面 在Custom domain里面填写自己的域名，选择save，这样就会出现上图的形式，显示Your site is published at https://你的域名，勾选Enforce HTTPS 4. 创建CNAME文件 进入你的Hexo本地文件所在的根目录，找到\\source目录，在里面创建一个文件CNAME，注意它是没有类型的，不是.txt。 在里面加入你的域名，注意不要在前面加入https www这样的前缀，就是你的域名。 然后hexo d -g部署你的网站，等待一段时间后，就可以通过你的个性域名访问网站了。 二、 SSL安全证书 注册好域名后，用google访问时，可能会出现您访问的不是安全链接的提示，或者能够正常访问，但是域名旁边显示的是一个感叹号，表示不安全，这是因为我们还没有申请安全证书，在申请了证书之后，域名旁边显示的就是一把锁，表示安全。 腾讯云和阿里云都提供免费的SSL证书下载，具体安装也有相关的文档，按照步骤操作就行。 腾讯云Nginx服务器证书安装 Mac下nginx的使用 在证书安装好了以后，可以看到域名解析里面多出了一条TXT类型的解析。 在Chrome浏览器中，打开网站后如果仍然显示不安全，即没有出现锁的图标，右击选择检查元素，进入开发者模式，看Security里面有什么问题。 踩坑：我发现我用阿里云图床的图片引用的是http头，把它改为https，锁就出现了。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://zhouzhuyan.com/categories/Hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://zhouzhuyan.com/tags/hexo/"}]},{"title":"字符串,向量和数组","slug":"字符串-向量和数组","date":"2020-04-03T14:03:24.000Z","updated":"2020-04-05T04:13:32.132Z","comments":true,"path":"posts/869e4b19.html","link":"","permalink":"https://zhouzhuyan.com/posts/869e4b19.html","excerpt":"二、字符串，向量和数组 作用域操作符:: 含义：编译器应从操作符左侧的作用域中寻找右边那个名字 比如std::cin是要使用命名空间std中的cin 这样做是为了避免某些名字被重复使用 使用using声明可以更加简便的使用命名空间中的成员。","text":"二、字符串，向量和数组 作用域操作符:: 含义：编译器应从操作符左侧的作用域中寻找右边那个名字 比如std::cin是要使用命名空间std中的cin 这样做是为了避免某些名字被重复使用 使用using声明可以更加简便的使用命名空间中的成员。 1. String类型 表示可变长的字符串 1.1 定义和初始化 使用需要头文件和命名空间 #include&lt;string&gt;using std::string; 初始化 string s1; // 空字符串string s2 = s1; // s2是s1的副本string s3 = \"abc\";string s4(10, 'c'); // 十个c 1.2 string对象上的操作 使用getline读取一整行 string line;getline(cin, line); 当读取到换行符时结束，并将读到的内容存入string中，但是不存换行符 empty和size操作 str.empty()根据字符串是否为空返回一个布尔值 str.size()返回字符串长度 使用visual studio编程的时候，碰到过一个warning，将无符号数赋值给了有符号数。 这是由于size函数的返回值类型引起的，它是一个string::size_type类型的值，是无符号类型的， 可以用auto来推断变量的值 auto len = str.size(); 比较，赋值，相加 string s1 = \"abc\";string s2 = \"xcvd\";// s1 &lt; s2 比较第一个不同的字符string s3 = s1; // 赋值string s4 = s1 + s2; // abcxcvd 处理string中的字符 #include&lt;cctype&gt;isalnum(c);isalpha(c);islower(c);isupper(c);ispunct(c); // 是标点符号为真 2. Vector类型 可变长数组，类似于Java中的ArrayList 2.1 初始化 vector&lt;T&gt; v;vector&lt;T&gt; v1 = &#123;a, b, c&#125;; // 注意是花括号vector&lt;T&gt; v2&#123;a, b&#125;; // 花括号，两个元素vector&lt;int&gt; v3(10, 1); // 圆括号 10个元素，每个初始化为1 2.2 操作 vector&lt;int&gt; v;v.push_back(1); // 添加1v.pop_back(); // 去掉最后一个数据v.empty();v.size();v[n]; // 注意下标只能访问，但是不能够添加元素 3. 迭代器 访问元素的作用 string s = \"abcde\";if (s.begin() != s.end()) &#123; // 确保s非空 &#125; 4. 数组 4.1 指针和数组 int ia[] = &#123;1, 2, 3, 4, 5&#125;;auto p(ia); // 整型指针，指向ia的第一个元素p++; // 指向第一个元素","categories":[{"name":"C++","slug":"C","permalink":"https://zhouzhuyan.com/categories/C/"},{"name":"基础","slug":"C/基础","permalink":"https://zhouzhuyan.com/categories/C/%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"C++","slug":"C","permalink":"https://zhouzhuyan.com/tags/C/"}]},{"title":"Hexo-Permalink简化","slug":"Hexo-Permalink简化","date":"2020-04-03T12:59:43.000Z","updated":"2020-04-04T14:45:26.611Z","comments":true,"path":"posts/838443af.html","link":"","permalink":"https://zhouzhuyan.com/posts/838443af.html","excerpt":"Permalink简化 在文档名有中文的时候，因为汉字会被转义，默认的永久链接会非常复杂，具体原因可以看这一篇文章 阮一峰 关于url编码 有两种方法优化。","text":"Permalink简化 在文档名有中文的时候，因为汉字会被转义，默认的永久链接会非常复杂，具体原因可以看这一篇文章 阮一峰 关于url编码 有两种方法优化。 方法一：自定义 首先，在scaffolds的post.md中，加入urlname元素。 title: &#123;&#123; title &#125;&#125;urlname:date: &#123;&#123; date &#125;&#125;tags:categories: 然后，在配置文件_config.yml中，将永久链接permalink的形式改为 permalink: :category/:urlname/ 也就是类别加上自定义的url链接。 每次写文章时，可以自己设计该页的url，使得它变得简单，同时也利于区分。 但是，这种修改方法的链接会随着文件目录的改变而改变， 比如一篇文章HelloWorld.md本来放在_posts目录下，链接为https://xxx/_posts/HelloWorld.md 之后归类到_posts/A目录下，那么链接变为https://xxx/_posts/A/HelloWorld.md 这样不太利于分享，所以推荐使用第二种方法。 方法二：插件 使用hexo-abbrlink这个插件 安装 npm install hexo-abbrlink --save 设置 在_config.yml文件中修改永久链接格式 permalink: posts/:abbrlink.htmlabbrlink: alg: crc32 # 算法：crc16(default) and crc32 rep: hex # 进制：dec(default) and hex posts部分是可以更改的，也可以仿照方法一添加一个关键词便于识别 permalink: :keywords/:abbrlink.html 生成 在根目录创建Gruntfile.js文件，让插件到source/_posts/下读取所有的.md文件，把文件中的@@abbrlink替换成文件内容的hash值。 module.exports = function(grunt) &#123; grunt.initConfig(&#123; rewrite: &#123; abbrlink: &#123; src: 'source/_posts/**/*.md', editor: function(contents, filepath)&#123; const crypto = require('crypto'); const hash = crypto.createHash('sha256'); hash.update(contents); var hashValue = hash.digest('hex'); return contents.replace(/@@abbrlink/g, hashValue.substring(0, 16)); &#125; &#125;, &#125;, &#125;); grunt.loadNpmTasks('grunt-rewrite');&#125;; 这种方法生成的链接是不带目录的，直接就是第二步设置中permalink的样式，所以也没有了被改变的风险。 参考 http://blog.jvaeyhcd.wang/posts/05c9df7e0c47bd64.html","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://zhouzhuyan.com/categories/Hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://zhouzhuyan.com/tags/hexo/"}]},{"title":"变量和基本类型","slug":"变量和基本类型","date":"2020-04-03T12:44:47.000Z","updated":"2020-04-04T14:44:34.579Z","comments":true,"path":"posts/96db5496.html","link":"","permalink":"https://zhouzhuyan.com/posts/96db5496.html","excerpt":"变量和基本类型 1. 复合类型(Compound type) 基于其它类型定义的类型 1.1 引用(Reference) 引用为对象起了另外一个名字，引用类型引用另外一种类型。通过将声明符写成&amp;d的形式来定义引用类型，其中d是声明的变量名。","text":"变量和基本类型 1. 复合类型(Compound type) 基于其它类型定义的类型 1.1 引用(Reference) 引用为对象起了另外一个名字，引用类型引用另外一种类型。通过将声明符写成&amp;d的形式来定义引用类型，其中d是声明的变量名。 (在这里，引用指的是左值引用) int ival = 1024;int &amp;refval = ival; // refval指向ival，是ival的另外一个名字int &amp;refVal2; // 报错；引用必须被初始化 定义引用时，程序把引用和它的初始值绑定在一起，而不是将初始值拷贝给引用。（与初始化变量时不同的） 无法令引用重新绑定到另一个对象，所以引用必须被初始化 引用即别名，它不是对象，而是为了一个已经存在的对象起了另外一个名字 定义了一个引用之后，对其进行的所有操作都是在与之绑定的对象上进行的 refVal = 2; // 把2赋值给与refVal绑定的对象上，这里就是绑定到iVal上int ii = refVal; 除了两种特殊情况，其它所有引用的类型都要与之绑定的对象严格匹配。不能够与字面值或表达式的计算结果绑定。 int &amp;refVal4 = 10; // 错误：引用对象初始值必须是一个对象double dval = 3.14;int &amp;refVal5 = dval; // 错误：此处引用类型的初始值必须是int型对象 1.2 指针 指针是指向另外一种类型的符合类型，与引用类似，指针实现了对其它对象的间接访问。 不同： 指针本身是一个对象 指针无需在定义时赋初值 int *ip1; // ip1是指向int对象的指针 获取对象的地址 指针存放某个对象的地址。 int ival = 42;int *p = &amp;ival; // p是存放变量ival的地址，或者说p是指向引用的指针。 指针值 指针的值（即地址）应该属于下列4中状态之一： 指向一个对象 指向紧邻对象所占空间的下一个位置 空指针 无效指针 利用指针访问对象 如果指针指向了一个对象，可以使用解引用符（操作符*）来访问对象 int ival = 42;int *p = &amp;ival;cout &lt;&lt; *p // 输出42*p = 0;cout &lt;&lt; *p // 输出0，为*p赋值实际上是为p所指的对象赋值 空指针 int *p1 = nullptr;int *p2 = 0;int *p3 = NULL; // 需要头文件cstdlib void*指针 用于存放任意对象的地址，不能直接操作void*指针所指的对象 指向指针的指针 指向指针的引用 指针是对象，所以存在对指针的引用 int i = 42;int *p;int *&amp;r = p; // r是一个对p的引用r = &amp;i; // r引用了一个指针，因此给r赋值&amp;就是令p指向i*r = 0; // 将i的值改为0 2. const限定符 值不能被改变，所以const对象必须被初始化 const int bufSize = 512; // 输入缓冲区大小 如果要在多个文件之间共享const，必须在变量定义前加extern关键字 2.1 对const的引用 对常量的引用，不能够修改其绑定的对象 对const的引用可以使一个并非const的对象，但是不能通过其改变值 const int ci = 1024;const int &amp;r1 = ci; // 正确r1 = 42; // 错误：r1是对常量的引用int &amp;r2 = ci; // 错误：非常量引用指向一个常量对象int i = 42；const int &amp;r1 = i; // 允许将const int&amp;绑定到一个普通的int上r1 = 10; // 错误 3. 处理类型 3.1 类型别名 某种类型的同义词，使得复杂的类型名字变得简单，易于理解和使用。 typedef double wages; // wages是double的同义词using SI = Sales_item; // SI是Sales_item的同义词 3.2 auto类型说明符 让编译器分析表达式所属的类型，必须有初始值 auto item = val1 + val2; // 由val1和val2相加的结果推断item的类型// auto一条声明语句只能有一个基础数据类型auto i = 0, *p = &amp;i; // 正确auto sz = 0, pi = 3.14; // 错误，sz和pi的类型不一致 4. 自定义数据结构 将一组相关的数据元素组织起来然后使用他们的策略和方法 struct Sales_data &#123; std::string bookNo; unsigned units_sold = 0; double revenue = 0;&#125;Sales_data accum;","categories":[{"name":"C++","slug":"C","permalink":"https://zhouzhuyan.com/categories/C/"},{"name":"基础","slug":"C/基础","permalink":"https://zhouzhuyan.com/categories/C/%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"C++","slug":"C","permalink":"https://zhouzhuyan.com/tags/C/"}]},{"title":"使用Github pages+Hexo 搭建个人博客","slug":"使用Github-pages-Hexo-搭建个人博客","date":"2020-04-01T17:56:42.000Z","updated":"2020-04-04T14:45:15.001Z","comments":true,"path":"posts/ae6c038e.html","link":"","permalink":"https://zhouzhuyan.com/posts/ae6c038e.html","excerpt":"Github pages + Hexo 搭建个人博客 2019年11月19日，我决定开始写博客，首先要用github pages+hexo搭建一个个人博客，其中的过程我就记录在这里面。","text":"Github pages + Hexo 搭建个人博客 2019年11月19日，我决定开始写博客，首先要用github pages+hexo搭建一个个人博客，其中的过程我就记录在这里面。 准备工作 注册一个 GitHub 账户 安装 Node.js 下载链接 https://nodejs.org/en/download/ 下面这个是中文网，对于国内用户来说下载速度非常快。 http://nodejs.cn/download/ 推荐菜鸟教程关于node的安装教程以及简易的语法介绍https://www.runoob.com/nodejs/nodejs-install-setup.html 安装git markdown语法学习 https://www.jianshu.com/p/191d1e21f7ed git语法学习 推荐廖雪峰的git教程 https://www.liaoxuefeng.com/wiki/896043488029600 安装 在终端检查node和npm的版本情况 node -vnpm -v 然后输入命令安装hexo npm install -g hexo-cli 我使用的是Mac电脑，在这一步出现了问题，终端显示如下 rollbackFailedOptional verb npm-session 然后我又等了一会儿，终端又报错了。 npm WARN checkPermissions Missing write access to /usr/local/lib/node_modulesnpm ERR! code EACCESnpm ERR! syscall accessnpm ERR! path /usr/local/lib/node_modulesnpm ERR! errno -13npm ERR! Error: EACCES: permission denied, access &apos;/usr/local/lib/node_modules&apos;npm ERR! [Error: EACCES: permission denied, access &apos;/usr/local/lib/node_modules&apos;] &#123;npm ERR! stack: &quot;Error: EACCES: permission denied, access &apos;/usr/local/lib/node_modules&apos;&quot;,npm ERR! errno: -13,npm ERR! code: &apos;EACCES&apos;,npm ERR! syscall: &apos;access&apos;,npm ERR! path: &apos;/usr/local/lib/node_modules&apos;npm ERR! &#125;npm ERR! npm ERR! The operation was rejected by your operating system.npm ERR! It is likely you do not have the permissions to access this file as the current usernpm ERR! npm ERR! If you believe this might be a permissions issue, please double-check thenpm ERR! permissions of the file and its containing directories, or try runningnpm ERR! the command again as root/Administrator. 根据官方文档，如果在尝试安装 Hexo 的过程中出现 EACCES权限错误，要遵循由npmjs发布的指导修复该问题。强烈建议不要使用 root、sudo 等方法覆盖权限。 根据要求，下载了nvm，并且在终端利用nvm下载了最新版本的node和更新了npm后，hexo下载成功了。（以下是下载和使用nvm的教程链接） https://github.com/nvm-sh/nvm. 建站 输入以下命令hexo就会出现在指定的文件夹中 hexo init &lt;folder&gt;cd &lt;folder&gt;npm install 如果出现错误 -bash: syntax error near unexpected token `newline' 这是占位符的问题，将第一行命令的&lt;&gt;去除，再重新输入即可。 到此，建站的基本操作就完成了。 界面的设计等就可以由自己来操作了。放一个hexo的官方网站供大家参考。 https://hexo.io/zh-cn/docs/configuration 创建Github远程仓库 注意仓库名为github的用户名.github.io，勾选readme 创建之后，进入仓库，点击Settings按钮，然后翻到GitHub Pages的部分，点击网页链接，就能够看到一个简易的网页了。 部署hexo 进入本地的hexo文件，找到 _config.yml，打开后翻到最后，修改成 deploy: type: git repo: gitHub: git@github.com:你的GitHub用户名/你的GitHub用户名.github.io.git branch: master repo后面的内容要修改成自己github仓库的SSH密匙。 然后在终端中输入 npm install hexo-deployer-git --save 开始安装hexo-deploy-git，安装完成后，开始部署，在终端中输入 hexo deploy 部署完成。 测试 这个时候，再次进入刚刚进入过的网页链接，就会看到一个船新版本的界面，也就是本地的hexo库已经部署到github上了。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://zhouzhuyan.com/categories/Hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://zhouzhuyan.com/tags/hexo/"}]},{"title":"Hexo写作","slug":"Hexo写作","date":"2020-04-01T15:58:14.000Z","updated":"2020-04-15T13:00:27.666Z","comments":true,"path":"posts/c4064b2b.html","link":"","permalink":"https://zhouzhuyan.com/posts/c4064b2b.html","excerpt":"Hexo写作 本文介绍了一些基本的Hexo配置和使用hexo+GitHub写作的流程。","text":"Hexo写作 本文介绍了一些基本的Hexo配置和使用hexo+GitHub写作的流程。 1. Hexo基本命令 hexo g = hexo generate #生成hexo s = hexo server #启动本地预览hexo d = hexo deploy #远程部署hexo n \"文章标题\" = hexo new \"文章标题\" #新建一篇博文 2. 整体配置 \\hexo\\_config.yml # Sitetitle: # 网站名，标签页显示subtitle: # 副标题，网站名下显示description: # 网站描述，便于搜索keywords:author: # 作者language: zh-CN # 中文timezone: Asia/Shanghai # 时区 3. 更换主题 推荐使用melody hexo-theme-melody快速开始 这个主题就是我现在网站使用的主题，它有完整的中文教程，功能齐全。按照教程配置就可以了。 4. 写作步骤 新建文章 hexo new \"title\" 写作 \\hexo\\source\\_post中找到title.md，使用typora打开 注意文章的tags格式是[] 在信息栏填写top_img信息可以自定义该页图片情况，如false表示不显示 文章中&lt;!-- more --&gt;之前的部分会显示在主页上，并出现Read more按钮，点击阅读更多内容 预览 hexo shexo s --debug // 在命令行生成debug信息 同步到远程 hexo d -g 5. 问题 Template render error: (unknown path) 在命令行输入hexo -g后报错，原因在于文章内容中有**{}**时，如果它没有被代码块包括，解析会出现错误，所以需要写成 &#123;% raw %&#125; 本地预览与远程显示不一致 删除缓存 hexo clean 在网页上刷新","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://zhouzhuyan.com/categories/Hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://zhouzhuyan.com/tags/hexo/"}]},{"title":"C++基本语法","slug":"学习cpp","date":"2020-01-27T03:49:27.000Z","updated":"2020-04-06T16:40:48.049Z","comments":true,"path":"posts/6b599344.html","link":"","permalink":"https://zhouzhuyan.com/posts/6b599344.html","excerpt":"C++学习笔记 本文记录了C++的学习笔记，主要内容来自于MOOC北京大学课程程序设计与算法。","text":"C++学习笔记 本文记录了C++的学习笔记，主要内容来自于MOOC北京大学课程程序设计与算法。 一、 变量 1. 用sizeof运算符求某一类型或变量占据的字节数 #include&lt;iostream&gt;using namespace std;int main() &#123; int a; cout &lt;&lt; sizeof(a) &lt;&lt; endl; // sizeof运算符可以求变量占据的字节数 cout &lt;&lt; a &lt;&lt; endl; // 未初始化的变量，其值是不确定的 int b = 1; cout &lt;&lt; b &lt;&lt; endl;&#125; 2. 数据类型的自动转换 1. 数 int a = 11.34; // 11.34被自动转化为11后赋值给aint b = 30;double d = b; // d的值是30.0 2. 字符类型与整型 int k = 'a';printf(\"%d\", k); // 输出97，即a的ASCII码int n = 98;char k = n;printf(\"%c\", k); // 输出b 3. 输入和输出 1. scanf和printf #include&lt;iostream&gt;#include&lt;cstdio&gt; //使用scanf和printf时需要使用该库int main() &#123; int n; char c; float m; scanf(\"%d%c%f\", &amp;n, &amp;c, &amp;m); printf(\"%d %c %f\\n\", n, c, m); return 0;&#125; 用scanf可以一次读入多个不同类型的变量，输入各项用空格隔开 注意在输入字符时，不会跳过空格（空格也会被当做字符读入） 输入其它数据时，会跳过空格 2. cin和cout #include&lt;iostream&gt;using namespace std;int main() &#123; int c; while ((c=cin.get()) != EOF) &#123; cout &lt;&lt; (char) c; &#125; return 0;&#125; 使用cin读入所有字符，包括空格和回车，EOF Mac（ctrl+D停止输入，ctrl+C停止程序) windows ctrl+Z停止 3. cin&amp;cout / scanf&amp;printf 比较 cin，cout速度慢，输入输出数据量大时用scanf/printf 一个程序不要同时出现cin和scanf，cout和prinf 4. 运算 加、减、乘运算的溢出 二、函数 1. 数组作为函数的参数传递 数组作为函数的参数时，是传引用的，即形参数组改变了，实参数组也会改变 二维数组作为函数的形参时，必须写明函数有多少列，不要写明有多少行 void PrintArray(int a[][5]) &#123; cout &lt;&lt; a[4][3];&#125; 必须要写明列数，编译器才能够根据下标算出元素的地址 $\\color&#123;#F00&#125;&#123;a[i][j]的地址 = 数组首地址 + i \\times N \\times sizeof(a[0][0]) + j \\times sizeof(a[0][0])&#125;$ (N是数组列数) 形参数组的首地址就是实参数组的首地址 三、字符串 1. 字符串的形式 （1）字符串常量 用双引号括起来的，如&quot;China&quot;, “C++ program”. 字符串常量占据内存的字节数等于字符中字符数目加1，结尾多出字符’\\0’. 但是字符串的长度不包含’\\0’ &quot;&quot;也是合法的·1字符串常量，称为空串，仍然占据一个字节的内存空间，存放’\\0’ （2）存放于字符数组中，以’\\0’结尾 用一维char数组存放字符串，结尾是’\\0’，数组元素个数至少为字符串长度+1。 用cin、scanf将字符串读入字符数组时，会自动在字符数组中字符串的末尾加上’\\0’。 （3）string对象。 string是C++标准模板库里的一个类，专门用于处理字符串","categories":[{"name":"C++","slug":"C","permalink":"https://zhouzhuyan.com/categories/C/"},{"name":"基础","slug":"C/基础","permalink":"https://zhouzhuyan.com/categories/C/%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"C++","slug":"C","permalink":"https://zhouzhuyan.com/tags/C/"}]}],"categories":[{"name":"数据科学","slug":"数据科学","permalink":"https://zhouzhuyan.com/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"},{"name":"Hexo","slug":"Hexo","permalink":"https://zhouzhuyan.com/categories/Hexo/"},{"name":"C++","slug":"C","permalink":"https://zhouzhuyan.com/categories/C/"},{"name":"基础","slug":"C/基础","permalink":"https://zhouzhuyan.com/categories/C/%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"概率论","slug":"概率论","permalink":"https://zhouzhuyan.com/tags/%E6%A6%82%E7%8E%87%E8%AE%BA/"},{"name":"hexo","slug":"hexo","permalink":"https://zhouzhuyan.com/tags/hexo/"},{"name":"C++","slug":"C","permalink":"https://zhouzhuyan.com/tags/C/"}]}