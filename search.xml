<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>字符串,向量和数组</title>
      <link href="/undefined/869e4b19.html"/>
      <url>/undefined/869e4b19.html</url>
      
        <content type="html"><![CDATA[<h3 id="二-字符串向量和数组"><a class="markdownIt-Anchor" href="#二-字符串向量和数组"></a> 二、字符串，向量和数组</h3><p>作用域操作符<code>::</code></p><p>含义：编译器应从操作符左侧的作用域中寻找右边那个名字</p><p>比如<code>std::cin</code>是要使用命名空间<code>std</code>中的<code>cin</code></p><p>这样做是为了避免某些名字被重复使用</p><p>使用<code>using</code>声明可以更加简便的使用命名空间中的成员。</p><h4 id="1-string类型"><a class="markdownIt-Anchor" href="#1-string类型"></a> 1. String类型</h4><p>表示可变长的字符串</p><h5 id="11-定义和初始化"><a class="markdownIt-Anchor" href="#11-定义和初始化"></a> 1.1 定义和初始化</h5><ol><li><p>使用需要头文件和命名空间</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br></pre></td></tr></table></figure></li><li><p>初始化</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> s1; <span class="comment">// 空字符串</span></span><br><span class="line"><span class="built_in">string</span> s2 = s1; <span class="comment">// s2是s1的副本</span></span><br><span class="line"><span class="built_in">string</span> s3 = <span class="string">"abc"</span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s4</span><span class="params">(<span class="number">10</span>, <span class="string">'c'</span>)</span></span>; <span class="comment">// 十个c</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="12-string对象上的操作"><a class="markdownIt-Anchor" href="#12-string对象上的操作"></a> 1.2 string对象上的操作</h5><ol><li><p>使用<code>getline</code>读取一整行</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> line;</span><br><span class="line">getline(<span class="built_in">cin</span>, line);</span><br></pre></td></tr></table></figure><p>当读取到换行符时结束，并将读到的内容存入<code>string</code>中，但是<strong>不存换行符</strong></p></li><li><p><code>empty</code>和<code>size</code>操作</p><p><code>str.empty()</code>根据字符串是否为空返回一个布尔值</p><p><code>str.size()</code>返回字符串长度</p><p>使用visual studio编程的时候，碰到过一个<strong>warning</strong>，将无符号数赋值给了有符号数。</p><p>这是由于<code>size</code>函数的返回值类型引起的，它是一个<code>string::size_type</code>类型的值，是无符号类型的，</p><p>可以用<code>auto</code>来推断变量的值</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> len = str.size();</span><br></pre></td></tr></table></figure></li><li><p>比较，赋值，相加</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> s1 = <span class="string">"abc"</span>;</span><br><span class="line"><span class="built_in">string</span> s2 = <span class="string">"xcvd"</span>;</span><br><span class="line"><span class="comment">// s1 &lt; s2 比较第一个不同的字符</span></span><br><span class="line"><span class="built_in">string</span> s3 = s1; <span class="comment">// 赋值</span></span><br><span class="line"><span class="built_in">string</span> s4 = s1 + s2; <span class="comment">// abcxcvd</span></span><br></pre></td></tr></table></figure></li><li><p>处理<code>string</code>中的字符</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="built_in">isalnum</span>(c);</span><br><span class="line"><span class="built_in">isalpha</span>(c);</span><br><span class="line"><span class="built_in">islower</span>(c);</span><br><span class="line"><span class="built_in">isupper</span>(c);</span><br><span class="line"><span class="built_in">ispunct</span>(c); <span class="comment">// 是标点符号为真</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="2-vector类型"><a class="markdownIt-Anchor" href="#2-vector类型"></a> 2. Vector类型</h4><p>可变长数组，类似于Java中的<code>ArrayList</code></p><h5 id="21-初始化"><a class="markdownIt-Anchor" href="#21-初始化"></a> 2.1 初始化</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;T&gt; v;</span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v1 = &#123;a, b, c&#125;; <span class="comment">// 注意是花括号</span></span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v2&#123;a, b&#125;;     <span class="comment">// 花括号，两个元素</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v3(<span class="number">10</span>, <span class="number">1</span>); <span class="comment">// 圆括号 10个元素，每个初始化为1</span></span><br></pre></td></tr></table></figure><h5 id="22-操作"><a class="markdownIt-Anchor" href="#22-操作"></a> 2.2 操作</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">v.push_back(<span class="number">1</span>); <span class="comment">// 添加1</span></span><br><span class="line">v.pop_back(); <span class="comment">// 去掉最后一个数据</span></span><br><span class="line">v.empty();</span><br><span class="line">v.size();</span><br><span class="line">v[n]; <span class="comment">// 注意下标只能访问，但是不能够添加元素</span></span><br></pre></td></tr></table></figure><h4 id="3-迭代器"><a class="markdownIt-Anchor" href="#3-迭代器"></a> 3. 迭代器</h4><p>访问元素的作用</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> s = <span class="string">"abcde"</span>;</span><br><span class="line"><span class="keyword">if</span> (s.begin() != s.end()) &#123; <span class="comment">// 确保s非空</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-数组"><a class="markdownIt-Anchor" href="#4-数组"></a> 4. 数组</h4><h5 id="41-指针和数组"><a class="markdownIt-Anchor" href="#41-指针和数组"></a> 4.1 指针和数组</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ia[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">p</span><span class="params">(ia)</span></span>; <span class="comment">// 整型指针，指向ia的第一个元素</span></span><br><span class="line">p++; <span class="comment">// 指向第一个元素</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Permalink简化</title>
      <link href="/hexo,permalink/838443af.html"/>
      <url>/hexo,permalink/838443af.html</url>
      
        <content type="html"><![CDATA[<h1 id="permalink简化"><a class="markdownIt-Anchor" href="#permalink简化"></a> Permalink简化</h1><p>在文档名有中文的时候，因为汉字会被转义，默认的永久链接会非常复杂，具体原因可以看这一篇文章</p><p><a href="http://www.ruanyifeng.com/blog/2010/02/url_encoding.html" target="_blank" rel="noopener">阮一峰 关于url编码</a></p><p>有两种方法优化。</p><h2 id="方法一自定义"><a class="markdownIt-Anchor" href="#方法一自定义"></a> 方法一：自定义</h2><p>首先，在<code>scaffolds</code>的<code>post.md</code>中，加入<code>urlname</code>元素。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">urlname:</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br></pre></td></tr></table></figure><p>然后，在配置文件<code>_config.yml</code>中，将永久链接<code>permalink</code>的形式改为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">permalink: :category/:urlname/</span><br></pre></td></tr></table></figure><p>也就是类别加上自定义的url链接。</p><p>每次写文章时，可以自己设计该页的<code>url</code>，使得它变得简单，同时也利于区分。</p><p>但是，这种修改方法的链接会随着文件目录的改变而改变，</p><p>比如一篇文章<code>HelloWorld.md</code>本来放在<code>_posts</code>目录下，链接为<code>https://xxx/_posts/HelloWorld.md</code></p><p>之后归类到<code>_posts/A</code>目录下，那么链接变为<code>https://xxx/_posts/A/HelloWorld.md</code></p><p>这样不太利于分享，所以推荐使用第二种方法。</p><h2 id="方法二插件"><a class="markdownIt-Anchor" href="#方法二插件"></a> 方法二：插件</h2><p>使用<code>hexo-abbrlink</code>这个插件</p><ol><li><p>安装</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure></li><li><p>设置</p><p>在<code>_config.yml</code>文件中修改永久链接格式</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">permalink: posts/:abbrlink.html</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  # 算法：crc16(default) and crc32</span><br><span class="line">  rep: hex    # 进制：dec(default) and hex</span><br></pre></td></tr></table></figure><p><code>posts</code>部分是可以更改的，也可以仿照方法一添加一个关键词便于识别</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">permalink: :keywords/:abbrlink.html</span><br></pre></td></tr></table></figure></li><li><p>生成</p><p>在根目录创建<code>Gruntfile.js</code>文件，让插件到<code>source/_posts/</code>下读取所有的.md文件，把文件中的@@abbrlink替换成文件内容的hash值。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</span><br><span class="line"> </span><br><span class="line">  grunt.initConfig(&#123;</span><br><span class="line"></span><br><span class="line">    rewrite: &#123;</span><br><span class="line">      abbrlink: &#123;</span><br><span class="line">        src: <span class="string">'source/_posts/**/*.md'</span>,</span><br><span class="line">        editor: <span class="function"><span class="keyword">function</span>(<span class="params">contents, filepath</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</span><br><span class="line">          <span class="keyword">const</span> hash = crypto.createHash(<span class="string">'sha256'</span>);</span><br><span class="line"></span><br><span class="line">          hash.update(contents);</span><br><span class="line">          <span class="keyword">var</span> hashValue = hash.digest(<span class="string">'hex'</span>);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> contents.replace(<span class="regexp">/@@abbrlink/g</span>, hashValue.substring(<span class="number">0</span>, <span class="number">16</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"> </span><br><span class="line">  grunt.loadNpmTasks(<span class="string">'grunt-rewrite'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><p>这种方法生成的链接是不带目录的，直接就是第二步设置中<code>permalink</code>的样式，所以也没有了被改变的风险。</p><p>参考</p><ol><li><a href="http://blog.jvaeyhcd.wang/posts/05c9df7e0c47bd64.html" target="_blank" rel="noopener">http://blog.jvaeyhcd.wang/posts/05c9df7e0c47bd64.html</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo本地文件分类</title>
      <link href="/hexo/b419f27c.html"/>
      <url>/hexo/b419f27c.html</url>
      
        <content type="html"><![CDATA[<h1 id="hexo本地文件分类"><a class="markdownIt-Anchor" href="#hexo本地文件分类"></a> Hexo本地文件分类</h1><p>我们知道在hexo中创建新的文章的命令是这样的</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new [layout]&lt;title&gt;</span><br></pre></td></tr></table></figure><p>如果没有设置<code>layout</code>，那么会用<code>_config.yml</code>中的<code>default_layout</code>代替，也就是<code>post。</code></p><p>那么我们所创建的文章都会被保存在<code>source/_posts</code>目录下。</p><p>而如果文章变得很多，要找到就会变得困难，所以本地也可以按类别进行分类。</p><p>具体操作如下：</p><ol><li><p>在<code>_posts</code>目录下新建一个文件夹</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page --path 文件夹名/index</span><br></pre></td></tr></table></figure><p>在目录中新建一个文件夹，文件夹中创建了一个<code>index.md</code>文件</p></li><li><p>当我们需要写一篇该类型的文章时，我们就可以在该目录下创建文章了。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new --path 文件夹名/文章名 &quot;文章名&quot;</span><br></pre></td></tr></table></figure><p>注意第一个文章名是该文件夹中的文件名，第二个文章名指定了该文章的<code>title</code>。</p></li></ol><p>第一步不需要加第二个文章名，否则就是直接创建文件了。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量和基本类型</title>
      <link href="/undefined/96db5496.html"/>
      <url>/undefined/96db5496.html</url>
      
        <content type="html"><![CDATA[<h3 id="变量和基本类型"><a class="markdownIt-Anchor" href="#变量和基本类型"></a> 变量和基本类型</h3><h4 id="1-复合类型compound-type"><a class="markdownIt-Anchor" href="#1-复合类型compound-type"></a> 1. 复合类型(Compound type)</h4><p>基于其它类型定义的类型</p><h5 id="11-引用reference"><a class="markdownIt-Anchor" href="#11-引用reference"></a> 1.1 引用(Reference)</h5><p><strong>引用</strong>为对象起了另外一个名字，引用类型引用另外一种类型。通过将声明符写成&amp;d的形式来定义引用类型，其中d是声明的变量名。</p><p>(在这里，引用指的是左值引用)</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ival = <span class="number">1024</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;refval = ival; <span class="comment">// refval指向ival，是ival的另外一个名字</span></span><br><span class="line"><span class="keyword">int</span> &amp;refVal2; <span class="comment">// 报错；引用必须被初始化</span></span><br></pre></td></tr></table></figure><p>定义引用时，程序把引用和它的初始值<strong>绑定</strong>在一起，而不是将初始值拷贝给引用。（与初始化变量时不同的）</p><p>无法令引用重新绑定到另一个对象，所以引用必须被<font color=red><strong>初始化</strong> </font></p><ul><li>引用即别名，它不是对象，而是为了一个已经存在的对象起了另外一个名字</li></ul><p>定义了一个引用之后，对其进行的所有操作都是在与之绑定的对象上进行的</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">refVal = <span class="number">2</span>;  <span class="comment">// 把2赋值给与refVal绑定的对象上，这里就是绑定到iVal上</span></span><br><span class="line"><span class="keyword">int</span> ii = refVal;</span><br></pre></td></tr></table></figure><p>除了两种特殊情况，其它所有引用的类型都要与之绑定的对象严格匹配。不能够与字面值或表达式的计算结果绑定。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> &amp;refVal4 = <span class="number">10</span>; <span class="comment">// 错误：引用对象初始值必须是一个对象</span></span><br><span class="line"><span class="keyword">double</span> dval = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;refVal5 = dval; <span class="comment">// 错误：此处引用类型的初始值必须是int型对象</span></span><br></pre></td></tr></table></figure><h5 id="12-指针"><a class="markdownIt-Anchor" href="#12-指针"></a> 1.2 指针</h5><p><strong>指针</strong>是指向另外一种类型的符合类型，与引用类似，指针实现了对其它对象的间接访问。</p><p>不同：</p><ul><li>指针本身是一个对象</li><li>指针无需在定义时赋初值</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *ip1; <span class="comment">// ip1是指向int对象的指针</span></span><br></pre></td></tr></table></figure><h6 id="获取对象的地址"><a class="markdownIt-Anchor" href="#获取对象的地址"></a> 获取对象的地址</h6><p>指针存放某个对象的地址。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ival = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">int</span> *p = &amp;ival; <span class="comment">// p是存放变量ival的地址，或者说p是指向引用的指针。</span></span><br></pre></td></tr></table></figure><h6 id="指针值"><a class="markdownIt-Anchor" href="#指针值"></a> 指针值</h6><p>指针的值（即地址）应该属于下列4中状态之一：</p><ul><li>指向一个对象</li><li>指向紧邻对象所占空间的下一个位置</li><li>空指针</li><li>无效指针</li></ul><h6 id="利用指针访问对象"><a class="markdownIt-Anchor" href="#利用指针访问对象"></a> 利用指针访问对象</h6><p>如果指针指向了一个对象，可以使用<strong>解引用符</strong>（操作符*）来访问对象</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ival = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">int</span> *p = &amp;ival;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *p <span class="comment">// 输出42</span></span><br><span class="line">*p = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *p <span class="comment">// 输出0，为*p赋值实际上是为p所指的对象赋值</span></span><br></pre></td></tr></table></figure><h6 id="空指针"><a class="markdownIt-Anchor" href="#空指针"></a> 空指针</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p1 = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">int</span> *p2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> *p3 = <span class="literal">NULL</span>; <span class="comment">// 需要头文件cstdlib</span></span><br></pre></td></tr></table></figure><h6 id="void指针"><a class="markdownIt-Anchor" href="#void指针"></a> void*指针</h6><p>用于存放任意对象的地址，不能直接操作void*指针所指的对象</p><h6 id="指向指针的指针"><a class="markdownIt-Anchor" href="#指向指针的指针"></a> 指向指针的指针</h6><h6 id="指向指针的引用"><a class="markdownIt-Anchor" href="#指向指针的引用"></a> 指向指针的引用</h6><p>指针是对象，所以存在对指针的引用</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">int</span> *p;</span><br><span class="line"><span class="keyword">int</span> *&amp;r = p;  <span class="comment">// r是一个对p的引用</span></span><br><span class="line">r = &amp;i;  <span class="comment">// r引用了一个指针，因此给r赋值&amp;就是令p指向i</span></span><br><span class="line">*r = <span class="number">0</span>;  <span class="comment">// 将i的值改为0</span></span><br></pre></td></tr></table></figure><h4 id="2-const限定符"><a class="markdownIt-Anchor" href="#2-const限定符"></a> 2. const限定符</h4><p>值不能被改变，所以const对象必须被初始化</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> bufSize = <span class="number">512</span>; <span class="comment">// 输入缓冲区大小</span></span><br></pre></td></tr></table></figure><p>如果要在多个文件之间共享const，必须在变量定义前加extern关键字</p><h5 id="21-对const的引用"><a class="markdownIt-Anchor" href="#21-对const的引用"></a> 2.1 对const的引用</h5><p>对常量的引用，不能够修改其绑定的对象</p><p>对const的引用可以使一个并非const的对象，但是不能通过其改变值</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ci = <span class="number">1024</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r1 = ci; <span class="comment">// 正确</span></span><br><span class="line"></span><br><span class="line">r1 = <span class="number">42</span>; <span class="comment">// 错误：r1是对常量的引用</span></span><br><span class="line"><span class="keyword">int</span> &amp;r2 = ci; <span class="comment">// 错误：非常量引用指向一个常量对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">42</span>；</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r1 = i; <span class="comment">// 允许将const int&amp;绑定到一个普通的int上</span></span><br><span class="line">r1 = <span class="number">10</span>; <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><h4 id="3-处理类型"><a class="markdownIt-Anchor" href="#3-处理类型"></a> 3. 处理类型</h4><h5 id="31-类型别名"><a class="markdownIt-Anchor" href="#31-类型别名"></a> 3.1 类型别名</h5><p>某种类型的同义词，使得复杂的类型名字变得简单，易于理解和使用。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> wages; <span class="comment">// wages是double的同义词</span></span><br><span class="line"><span class="keyword">using</span> SI = Sales_item; <span class="comment">// SI是Sales_item的同义词</span></span><br></pre></td></tr></table></figure><h5 id="32-auto类型说明符"><a class="markdownIt-Anchor" href="#32-auto类型说明符"></a> 3.2 auto类型说明符</h5><p>让编译器分析表达式所属的类型，必须有初始值</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> item = val1 + val2; <span class="comment">// 由val1和val2相加的结果推断item的类型</span></span><br><span class="line"><span class="comment">// auto一条声明语句只能有一个基础数据类型</span></span><br><span class="line"><span class="keyword">auto</span> i = <span class="number">0</span>, *p = &amp;i;  <span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">auto</span> sz = <span class="number">0</span>, pi = <span class="number">3.14</span>; <span class="comment">// 错误，sz和pi的类型不一致</span></span><br></pre></td></tr></table></figure><h4 id="4-自定义数据结构"><a class="markdownIt-Anchor" href="#4-自定义数据结构"></a> 4. 自定义数据结构</h4><p>将一组相关的数据元素组织起来然后使用他们的策略和方法</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sales_data</span> &#123;</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> bookNo;</span><br><span class="line">  <span class="keyword">unsigned</span> units_sold = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">double</span> revenue = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Sales_data accum;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Head First Pattern读书笔记(一)</title>
      <link href="/Design-Pattern,Strategy/9883ff8.html"/>
      <url>/Design-Pattern,Strategy/9883ff8.html</url>
      
        <content type="html"><![CDATA[<h1 id="head-first-设计模式-读书笔记"><a class="markdownIt-Anchor" href="#head-first-设计模式-读书笔记"></a> Head First 设计模式 读书笔记</h1><h2 id="一-设计模式入门"><a class="markdownIt-Anchor" href="#一-设计模式入门"></a> 一、 设计模式入门</h2><p>如果有一个鸭子的类如下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">  quack();</span><br><span class="line">  swim();</span><br><span class="line">  dispaly(); <span class="comment">// 每一种鸭子不同，display()抽象</span></span><br><span class="line">  <span class="comment">// 其它方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在需要增加一个功能，让鸭子会飞。</p><p>如果直接添加一个<code>fly()</code>方法，则所有子类都具备该方法，那么会出现会飞的橡皮鸭。</p><p><font color=red><strong>涉及维护问题，为了&quot;复用&quot;目的而使用继承，并不合适</strong></font></p><p>可能的解决方案：</p><ol><li><p>继承：把在橡皮鸭的<code>fly()</code>方法覆盖</p><p><strong>问题</strong>：如果再加入诱饵鸭，不会飞也不会叫，每次更新加入更多的鸭子……</p><p>于是每当有新的子类，就要检查<code>fly()</code>方法</p><p>我们发现了以下缺点</p><ul><li>代码在多个子类中重复</li><li>运行时的状态不易改变</li><li>很难知道所有鸭子的行为</li><li>改变会牵一发而动全身，造成不想要的改变</li></ul></li><li><p>接口：把<code>fly()</code>从超类中取出，放入<code>Flyable接口</code>，使得会飞的鸭子实现接口。</p><p><strong>问题</strong>：重复代码变多，代码无法复用（如果有100个duck子类都要修改飞行的行为？？？）</p></li></ol><h3 id="1-软件开发的不变真理改变"><a class="markdownIt-Anchor" href="#1-软件开发的不变真理改变"></a> 1. 软件开发的不变真理——改变</h3><p>不管一开始软件设计的有多好，一段时间后，总是需要成长和改变。</p><h3 id="2-设计模式入门"><a class="markdownIt-Anchor" href="#2-设计模式入门"></a> 2. 设计模式入门</h3><p>继承的问题：让所有鸭子都有某些行为，不恰当</p><p>接口的问题：Java接口不具有实现代码，所以继承接口无法实现代码的复用。修改量大。</p><h4 id="解决方案"><a class="markdownIt-Anchor" href="#解决方案"></a> 解决方案</h4><p><font color=red><strong>设计原则</strong></font></p><p><strong>找到可能需要变化的地方，独立出来，不要和不需要变化的代码混在一起。</strong></p><p>把会变化的部分取出封装起来，改动和扩充时不会影响不需要变化的部分。</p><p>核心：<font color=red><strong>系统中某部分的改变不影响其他部分</strong></font></p><p>结果：改动引起的可能错误减少，系统更有弹性</p><h4 id="分开变化和不会变化的部分"><a class="markdownIt-Anchor" href="#分开变化和不会变化的部分"></a> 分开变化和不会变化的部分</h4><p>对于Duck，分离fly与quack，建立两组类，分别实现各自的动作</p><p>比如一组类中可以有“呱呱叫”，“吱吱叫”，“安静”</p><h4 id="设计鸭子的行为"><a class="markdownIt-Anchor" href="#设计鸭子的行为"></a> 设计鸭子的行为</h4><p>一切要由弹性。鸭子类中包含设定行为的方法，这样可以动态的改变实例的行为</p><p><font color=red><strong>设计原则</strong></font></p><p><strong>针对接口编程，而不是针对实现编程</strong></p><p>利用接口代表每个行为，由行为类而不是Duck类实现行为接口</p><p>比较：</p><p>​以前行为来自Duck超类，依赖于实现，无法更改行为</p><p>​现在使用接口表是的行为，特定的具体行为编写在了行为类中。</p><p>比如，FlyBehavior接口,以及它对应的类，负责实现具体的行为：</p><p>​实现复用，新增行为不会影响到已有的类</p><p><strong>针对接口编程的真正意思是针对超类型编程</strong>，这里的接口可以是interface构造，也可以是超类型编程。</p><p>关键在于多态。</p><h4 id="整合鸭子的行为"><a class="markdownIt-Anchor" href="#整合鸭子的行为"></a> 整合鸭子的行为</h4><h4 id="动态设定行为"><a class="markdownIt-Anchor" href="#动态设定行为"></a> 动态设定行为</h4><p>见代码</p><h4 id="封装行为的大局观"><a class="markdownIt-Anchor" href="#封装行为的大局观"></a> 封装行为的大局观</h4><p>鸭子的一组行为  --&gt; 一族算法（代表鸭子能做的事）</p><p>每一个鸭子都有一个（HAS-A）FlyBehavior和一个QuackBehavior，将飞行和叫声委托给它代为处理。</p><p>将两个类结合起来使用——<strong>组合</strong></p><p><font color=red><strong>设计原则</strong></font></p><p><strong>多用组合，少用继承</strong></p><p>使用继承具有很大的弹性，不仅可以将算法族封装成类，还可以在运行时动态地改变行为。</p><h4 id="第一个设计模式策略模式"><a class="markdownIt-Anchor" href="#第一个设计模式策略模式"></a> 第一个设计模式：策略模式</h4><p>定义了<strong>算法族</strong>，分别封装起来，让它们之间可以相互替换，此模式让算法的变化独立于使用算法的客户。</p><h3 id="3-工具"><a class="markdownIt-Anchor" href="#3-工具"></a> 3. 工具</h3><table><thead><tr><th style="text-align:center">基础</th><th style="text-align:center">原则</th><th style="text-align:center">模式</th></tr></thead><tbody><tr><td style="text-align:center">抽象</td><td style="text-align:center">封装变化</td><td style="text-align:center">策略模式</td></tr><tr><td style="text-align:center">封装</td><td style="text-align:center">多用组合，少用继承</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">多态</td><td style="text-align:center">针对接口编程，不针对实现编程</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">继承</td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Design Pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Strategy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Github pages+Hexo 搭建个人博客</title>
      <link href="/hexo/ae6c038e.html"/>
      <url>/hexo/ae6c038e.html</url>
      
        <content type="html"><![CDATA[<h1 id="github-pages-hexo-搭建个人博客"><a class="markdownIt-Anchor" href="#github-pages-hexo-搭建个人博客"></a> Github pages + Hexo 搭建个人博客</h1><p>2019年11月19日，我决定开始写<strong>博客</strong>，首先要用<em>github pages+hexo</em>搭建一个个人博客，其中的过程我就记录在这里面。</p><h2 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h2><ol><li>注册一个 GitHub 账户</li><li>安装 Node.js<br />下载链接<br /><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a><br />下面这个是中文网，对于国内用户来说下载速度非常快。<br /><a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a><br />推荐菜鸟教程关于node的安装教程以及简易的语法介绍<a href="https://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">https://www.runoob.com/nodejs/nodejs-install-setup.html</a></li><li>安装git</li><li>markdown语法学习<br /><a href="https://www.jianshu.com/p/191d1e21f7ed" target="_blank" rel="noopener">https://www.jianshu.com/p/191d1e21f7ed</a></li><li>git语法学习<br />推荐廖雪峰的git教程<br /><a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/896043488029600</a></li></ol><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><p>在终端检查node和npm的版本情况</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>然后输入命令安装hexo</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>我使用的是Mac电脑，在这一步出现了问题，终端显示如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rollbackFailedOptional verb npm-session</span><br></pre></td></tr></table></figure><p>然后我又等了一会儿，终端又报错了。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm WARN checkPermissions Missing write access to /usr/local/lib/node_modules</span><br><span class="line">npm ERR! code EACCES</span><br><span class="line">npm ERR! syscall access</span><br><span class="line">npm ERR! path /usr/local/lib/node_modules</span><br><span class="line">npm ERR! errno -13</span><br><span class="line">npm ERR! Error: EACCES: permission denied, access &apos;/usr/local/lib/node_modules&apos;</span><br><span class="line">npm ERR!  [Error: EACCES: permission denied, access &apos;/usr/local/lib/node_modules&apos;] &#123;</span><br><span class="line">npm ERR!   stack: &quot;Error: EACCES: permission denied, access &apos;/usr/local/lib/node_modules&apos;&quot;,</span><br><span class="line">npm ERR!   errno: -13,</span><br><span class="line">npm ERR!   code: &apos;EACCES&apos;,</span><br><span class="line">npm ERR!   syscall: &apos;access&apos;,</span><br><span class="line">npm ERR!   path: &apos;/usr/local/lib/node_modules&apos;</span><br><span class="line">npm ERR! &#125;</span><br><span class="line">npm ERR! </span><br><span class="line">npm ERR! The operation was rejected by your operating system.</span><br><span class="line">npm ERR! It is likely you do not have the permissions to access this file as the current user</span><br><span class="line">npm ERR! </span><br><span class="line">npm ERR! If you believe this might be a permissions issue, please double-check the</span><br><span class="line">npm ERR! permissions of the file and its containing directories, or try running</span><br><span class="line">npm ERR! the command again as root/Administrator.</span><br></pre></td></tr></table></figure><p>根据官方文档，如果在尝试安装 Hexo 的过程中出现 <code>EACCES</code>权限错误，要遵循由<a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally#reinstall-npm-with-a-node-version-manager" target="_blank" rel="noopener">npmjs</a>发布的指导修复该问题。强烈建议不要使用 root、sudo 等方法覆盖权限。<br />根据要求，下载了<strong>nvm</strong>，并且在终端利用nvm下载了最新版本的node和更新了npm后，hexo下载成功了。（以下是下载和使用nvm的教程链接）<br /><a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noopener">https://github.com/nvm-sh/nvm</a>.</p><h2 id="建站"><a class="markdownIt-Anchor" href="#建站"></a> 建站</h2><p>输入以下命令hexo就会出现在指定的文件夹中</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>如果出现错误</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-bash: syntax error near unexpected token `newline<span class="string">'</span></span><br></pre></td></tr></table></figure><p>这是占位符的问题，将第一行命令的&lt;&gt;去除，再重新输入即可。</p><p>到此，建站的基本操作就完成了。</p><p>界面的设计等就可以由自己来操作了。放一个hexo的官方网站供大家参考。<br /><a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/configuration</a></p><h2 id="创建github远程仓库"><a class="markdownIt-Anchor" href="#创建github远程仓库"></a> 创建Github远程仓库</h2><p><a href="http://xn--github-vy7ix4bc60aha9370a9hgi3dqx5cq4zcte.github.io" target="_blank" rel="noopener">注意仓库名为github的用户名.github.io</a>，勾选readme<br /><img src="https://img-blog.csdnimg.cn/20191123194438458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dhbGFoYWR6aG91,size_16,color_FFFFFF,t_70" alt="" /></p><p>创建之后，进入仓库，点击<strong>Settings</strong>按钮，然后翻到GitHub Pages的部分，点击网页链接，就能够看到一个简易的网页了。</p><p><img src="https://img-blog.csdnimg.cn/20191123194913735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dhbGFoYWR6aG91,size_16,color_FFFFFF,t_70" alt="" /></p><h2 id="部署hexo"><a class="markdownIt-Anchor" href="#部署hexo"></a> 部署hexo</h2><p>进入本地的hexo文件，找到 <strong>_config.yml</strong>，打开后翻到最后，修改成</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">     gitHub: git<span class="meta">@github</span>.com:你的GitHub用户名/你的GitHub用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>repo后面的内容要修改成自己github仓库的SSH密匙。</p><p>然后在终端中输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>开始安装hexo-deploy-git，安装完成后，开始部署，在终端中输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>部署完成。</p><h2 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h2><p>这个时候，再次进入刚刚进入过的网页链接，就会看到一个船新版本的界面，也就是本地的hexo库已经部署到github上了。</p><p><img src="https://img-blog.csdnimg.cn/20191123195408260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dhbGFoYWR6aG91,size_16,color_FFFFFF,t_70" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo写作</title>
      <link href="/hexo/c4064b2b.html"/>
      <url>/hexo/c4064b2b.html</url>
      
        <content type="html"><![CDATA[<h1 id="hexo写作"><a class="markdownIt-Anchor" href="#hexo写作"></a> Hexo写作</h1><p>本文介绍了一些基本的Hexo配置和使用hexo+GitHub写作的流程。</p><a id="more"></a><h3 id="1-hexo基本命令"><a class="markdownIt-Anchor" href="#1-hexo基本命令"></a> 1. Hexo基本命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g = hexo generate  #生成</span><br><span class="line">hexo s = hexo server  #启动本地预览</span><br><span class="line">hexo d = hexo deploy  #远程部署</span><br><span class="line">hexo n "文章标题" = hexo new "文章标题"  #新建一篇博文</span><br></pre></td></tr></table></figure><h3 id="2-整体配置"><a class="markdownIt-Anchor" href="#2-整体配置"></a> 2. 整体配置</h3><p><code>\hexo\_config.yml</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Site</span></span><br><span class="line">title:  # 网站名，标签页显示</span><br><span class="line">subtitle:  # 副标题，网站名下显示</span><br><span class="line">description:  # 网站描述，便于搜索</span><br><span class="line">keywords:</span><br><span class="line">author: # 作者</span><br><span class="line">language: zh-CN # 中文</span><br><span class="line">timezone: Asia/Shanghai # 时区</span><br></pre></td></tr></table></figure><h3 id="3-更换主题"><a class="markdownIt-Anchor" href="#3-更换主题"></a> 3. 更换主题</h3><p>推荐使用<code>melody</code></p><p><a href="%5Bhttps://molunerfinn.com/hexo-theme-melody-doc/zh-Hans/quick-start.html#%E5%AE%89%E8%A3%85%5D(https://molunerfinn.com/hexo-theme-melody-doc/zh-Hans/quick-start.html#%E5%AE%89%E8%A3%85)">hexo-theme-melody快速开始</a></p><p>这个主题就是我现在网站使用的主题，它有完整的中文教程，功能齐全。按照教程配置就可以了。</p><h3 id="4-写作步骤"><a class="markdownIt-Anchor" href="#4-写作步骤"></a> 4. 写作步骤</h3><ol><li><p>新建文章</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new "title"</span><br></pre></td></tr></table></figure></li><li><p>写作</p><p><code>\hexo\source\_post</code>中找到<code>title.md</code>，使用<code>typora</code>打开</p><p>注意文章的<code>tags</code>格式是<code>[]</code></p><p>在信息栏填写<code>top_img</code>信息可以自定义该页图片情况，如<code>false</code>表示不显示</p><p><code>文章中&lt;!-- more --&gt;</code>之前的部分会显示在主页上，并出现<code>Read more</code>按钮，点击阅读更多内容</p></li><li><p>预览</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></li><li><p>同步到远程</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-问题"><a class="markdownIt-Anchor" href="#5-问题"></a> 5.  问题</h3><ol><li><p>Template render error: (unknown path)</p><p>在命令行输入<code>hexo -g</code>后报错，原因在于文章内容中有**{}**时，如果它没有被代码块包括，解析会出现错误，所以需要写成</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br></pre></td></tr></table></figure></li><li><p>本地预览与远程显示不一致</p><p>删除缓存</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>在网页上刷新</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习cpp</title>
      <link href="/undefined/6b599344.html"/>
      <url>/undefined/6b599344.html</url>
      
        <content type="html"><![CDATA[<h1 id="c学习笔记"><a class="markdownIt-Anchor" href="#c学习笔记"></a> C++学习笔记</h1><p>本文记录了C++的学习笔记，主要内容来自于MOOC北京大学课程程序设计与算法。</p><a id="more"></a><h1 id="一-变量"><a class="markdownIt-Anchor" href="#一-变量"></a> 一、 变量</h1><h2 id="1-用sizeof运算符求某一类型或变量占据的字节数"><a class="markdownIt-Anchor" href="#1-用sizeof运算符求某一类型或变量占据的字节数"></a> 1. 用sizeof运算符求某一类型或变量占据的字节数</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(a) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// sizeof运算符可以求变量占据的字节数</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 未初始化的变量，其值是不确定的</span></span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-数据类型的自动转换"><a class="markdownIt-Anchor" href="#2-数据类型的自动转换"></a> 2. 数据类型的自动转换</h2><h3 id="1-数"><a class="markdownIt-Anchor" href="#1-数"></a> 1. 数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">11.34</span>; <span class="comment">// 11.34被自动转化为11后赋值给a</span></span><br><span class="line"><span class="keyword">int</span> b = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">double</span> d = b; <span class="comment">// d的值是30.0</span></span><br></pre></td></tr></table></figure><h3 id="2-字符类型与整型"><a class="markdownIt-Anchor" href="#2-字符类型与整型"></a> 2. 字符类型与整型</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> k = <span class="string">'a'</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, k); <span class="comment">// 输出97，即a的ASCII码</span></span><br><span class="line"><span class="keyword">int</span> n = <span class="number">98</span>;</span><br><span class="line"><span class="keyword">char</span> k = n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, k); <span class="comment">// 输出b</span></span><br></pre></td></tr></table></figure><h2 id="3-输入和输出"><a class="markdownIt-Anchor" href="#3-输入和输出"></a> 3. 输入和输出</h2><h4 id="1-scanf和printf"><a class="markdownIt-Anchor" href="#1-scanf和printf"></a> 1. scanf和printf</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt; //使用scanf和printf时需要使用该库</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">float</span> m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%c%f"</span>, &amp;n, &amp;c, &amp;m);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %c %f\n"</span>, n, c, m);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用scanf可以一次读入多个不同类型的变量，输入各项用空格隔开<br />注意在输入<strong>字符</strong>时，不会跳过空格（空格也会被当做字符读入）<br />输入其它数据时，会跳过空格</p><h4 id="2-cin和cout"><a class="markdownIt-Anchor" href="#2-cin和cout"></a> 2. cin和cout</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">while</span> ((c=<span class="built_in">cin</span>.get()) != EOF) &#123; </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (<span class="keyword">char</span>) c; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用cin读入所有字符，包括空格和回车，EOF<br />Mac（ctrl+D停止输入，ctrl+C停止程序)<br />windows ctrl+Z停止</p><h4 id="3-cincout-scanfprintf-比较"><a class="markdownIt-Anchor" href="#3-cincout-scanfprintf-比较"></a> 3. cin&amp;cout / scanf&amp;printf 比较</h4><ul><li>cin，cout速度慢，输入输出数据量大时用scanf/printf</li><li>一个程序不要同时出现cin和scanf，cout和prinf</li></ul><h2 id="4-运算"><a class="markdownIt-Anchor" href="#4-运算"></a> 4. 运算</h2><ol><li>加、减、乘运算的溢出</li></ol><hr /><h1 id="二-函数"><a class="markdownIt-Anchor" href="#二-函数"></a> 二、函数</h1><h3 id="1-数组作为函数的参数传递"><a class="markdownIt-Anchor" href="#1-数组作为函数的参数传递"></a> 1. 数组作为函数的参数传递</h3><p>数组作为函数的参数时，是传引用的，即<strong>形参数组改变了，实参数组也会改变</strong></p><p>二维数组作为函数的形参时，<strong>必须写明函数有多少列</strong>，不要写明有多少行</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintArray</span><span class="params">(<span class="keyword">int</span> a[][<span class="number">5</span>])</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; a[<span class="number">4</span>][<span class="number">3</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>必须要写明列数，编译器才能够根据下标算出元素的地址</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$\color&#123;#F00&#125;&#123;a[i][j]的地址 = 数组首地址 + i \times N \times sizeof(a[0][0]) + j \times sizeof(a[0][0])&#125;$ (N是数组列数)</span><br></pre></td></tr></table></figure><p>形参数组的首地址就是实参数组的首地址</p><h1 id="三-字符串"><a class="markdownIt-Anchor" href="#三-字符串"></a> 三、字符串</h1><h2 id="1-字符串的形式"><a class="markdownIt-Anchor" href="#1-字符串的形式"></a> 1. 字符串的形式</h2><h3 id="1字符串常量"><a class="markdownIt-Anchor" href="#1字符串常量"></a> （1）字符串常量</h3><p>用双引号括起来的，如&quot;China&quot;, “C++ program”.</p><p>字符串常量占据<strong>内存</strong>的字节数等于字符中字符数目加1，结尾多出字符’\0’.</p><p><font color=#F00>但是字符串的长度不包含’\0’</font></p><p>&quot;&quot;也是合法的·1字符串常量，称为空串，仍然占据一个字节的内存空间，存放’\0’</p><h3 id="2存放于字符数组中以0结尾"><a class="markdownIt-Anchor" href="#2存放于字符数组中以0结尾"></a> （2）存放于字符数组中，以’\0’结尾</h3><p>用一维char数组存放字符串，结尾是’\0’，数组元素个数至少为<font color=#F00>字符串长度+1</font>。</p><p>用cin、scanf将字符串读入字符数组时，会自动在字符数组中字符串的末尾加上’\0’。</p><h3 id="3string对象"><a class="markdownIt-Anchor" href="#3string对象"></a> （3）string对象。</h3><p>string是C++标准模板库里的一个类，专门用于处理字符串</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
